{
  
    
        "post0": {
            "title": "Cross Entropy",
            "content": "Library &#54840;&#52636; . import math import numbers from typing import Optional, Tuple, Sequence, Union, Any import numpy as np import torch import torch.nn as nn . Numpy&#47196; &#44396;&#54788;&#54616;&#44592; . class NumpyCrossEntropy: @staticmethod def log_softmax(ndarray: np.ndarray, dim: int = -1) -&gt; np.ndarray: c = np.amax(ndarray, axis=dim, keepdims=True) s = ndarray - c nominator = np.exp(s) denominator = nominator.sum(axis=-1, keepdims=True) probs = nominator / denominator return np.log(probs) @staticmethod def negative_log_likelihood(y_pred: np.ndarray, y: np.ndarray) -&gt; np.ndarray: # must to be batch_first log_likelihood = y_pred[np.arange(y_pred.shape[0]), y] nll = -log_likelihood return np.mean(nll) def cross_entropy(self, y_pred: np.ndarray, y: np.ndarray) -&gt; np.ndarray: log_probs = self.log_softmax(y_pred) ce_loss = self.negative_log_likelihood(log_probs, y) return ce_loss . nce = NumpyCrossEntropy() . PyTorch&#47196; &#44396;&#54788;&#54616;&#44592; . _TensorOrTensors = Union[torch.Tensor, Sequence[torch.Tensor]] class LogSoftmax(torch.autograd.Function): @staticmethod def forward(ctx: Any, tensor: Any, dim: int = -1) -&gt; Any: # softmax(x) = softmax(x+c) c = torch.amax(tensor, dim=dim, keepdims=True) s = tensor - c # Calculate softmax nominator = torch.exp(s) denominator = nominator.sum(dim=dim, keepdims=True) probs = nominator / denominator # Calculate log log_probs = torch.log(probs) ctx.save_for_backward(probs, torch.tensor(dim)) return log_probs @staticmethod def backward(ctx: Any, grad_outputs: Any) -&gt; Any: # https://github.com/pytorch/pytorch/blob/master/aten/src/ATen/native/SoftMax.cpp#L219 probs, dim, = ctx.saved_tensors grad_outputs -= probs * grad_outputs.sum(dim=dim.item(), keepdims=True) return grad_outputs, None class NegativeLogLikelihoodLoss(torch.autograd.Function): @staticmethod def forward(ctx: Any, y_pred: Any, y: Any) -&gt; Any: bsz, n_classes = torch.tensor(y_pred.size()) ctx.save_for_backward(bsz, n_classes, y) log_likelihood = y_pred[torch.arange(bsz), y] # Calculate Log Likelihood nll = -log_likelihood # Calculate Negative Log Likelihood return torch.mean(nll) # Calculate Loss @staticmethod def backward(ctx: Any, grad_outputs: Any) -&gt; Any: bsz, n_classes, y, = ctx.saved_tensors mean_grad = grad_outputs.expand(bsz) / bsz # backward mean function negative_mean_grad = -mean_grad # backward negative # backward log likelihood (indexing) ll_grad = torch.zeros(bsz, n_classes) ll_grad[torch.arange(bsz), y] = 1. grad_outputs = torch.diag(negative_mean_grad) @ ll_grad return grad_outputs, None class CrossEntropyLoss(nn.Module): log_softmax = LogSoftmax.apply negative_log_likelihood = NegativeLogLikelihoodLoss.apply def forward(self, y_pred, y): log_probs = self.log_softmax(y_pred, -1) ce_loss = self.negative_log_likelihood(log_probs, y) probs = torch.exp(log_probs) / log_probs.size(0) self.save_for_backward(probs, y, y_pred.size(0), y_pred.size(-1)) return ce_loss def save_for_backward(self, *args): self.saved_tensors = args @torch.no_grad() def backward(self, grad_outputs: _TensorOrTensors) -&gt; _TensorOrTensors: probs, y, bsz, num_classes, = self.saved_tensors y = torch.nn.functional.one_hot(y, num_classes=num_classes) ce_grad = probs - (y / bsz) return grad_outputs * ce_grad class PyTorchCrossEntropy: def __init__(self): self.cross_entropy = CrossEntropyLoss() self.log_softmax = self.cross_entropy.log_softmax self.negative_log_likelihood = self.cross_entropy.negative_log_likelihood . tce = PyTorchCrossEntropy() . &#44208;&#44284;&#44050; &#48708;&#44368; . import random from functools import partial batch_size = 8 vocab_size = 3000 rtol = 1e-4 atol = 1e-6 isclose = partial(torch.isclose, rtol=rtol, atol=atol) . y_pred = [[random.normalvariate(mu=0., sigma=1.) for _ in range(vocab_size)] for _ in range(batch_size)] y_pred_torch = torch.FloatTensor(y_pred) y_pred_torch.requires_grad = True y_pred_numpy = y_pred_torch.detach().numpy() y = [random.randint(0, vocab_size) for _ in range(batch_size)] y_torch = torch.LongTensor(y) y_numpy = y_torch.numpy() . ce_result = nn.CrossEntropyLoss()(y_pred_torch, y_torch) ce_numpy = nce.cross_entropy(y_pred_numpy, y_numpy) ce_torch = tce.cross_entropy(y_pred_torch, y_torch) try: isclose(ce_result, ce_torch).item() isclose(ce_result, torch.tensor(ce_numpy)).item() success = True except: success = False print(&quot;Do both output the same tensors?&quot;, &quot;🔥&quot; if success else &quot;💩&quot;) if not success: raise Exeption(&quot;Something went wrong&quot;) . Do both output the same tensors? 🔥 . ce_grad = torch.autograd.grad(ce_result, y_pred_torch, retain_graph=True)[0] my_ce_grad1 = torch.autograd.grad(ce_torch, y_pred_torch, retain_graph=True)[0] my_ce_grad2 = tce.cross_entropy.backward(torch.ones_like(y_pred_torch)) # my_ce_grad2 = tce.cross_entropy.backward(y_pred_torch) try: isclose(ce_grad, my_ce_grad1).all() isclose(ce_grad, my_ce_grad2).all() success = True except: success = False print(&quot;Do both output the same tensors?&quot;, &quot;🔥&quot; if success else &quot;💩&quot;) if not success: raise Exeption(&quot;Something went wrong&quot;) . Do both output the same tensors? 🔥 . import matplotlib.pyplot as plt . (~isclose(ce_grad, my_ce_grad)).sum(dim=1) . tensor([1, 1, 1, 1, 1, 1, 1, 1]) . plt.plot((~isclose(ce_grad, my_ce_grad)).sum(dim=0).numpy()) . [&lt;matplotlib.lines.Line2D at 0x1fe6c8e22e8&gt;] . (~isclose(ce_grad, my_ce_grad)[:, 1000:2000]).sum() . tensor(2) .",
            "url": "https://jinmang2.github.io/implementation/ai-math/2022/02/07/cross-entropy.html",
            "relUrl": "/implementation/ai-math/2022/02/07/cross-entropy.html",
            "date": " • Feb 7, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://jinmang2.github.io/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://jinmang2.github.io/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Hi! I’m MyunghoonJin . This website 1 (powered by fastpages) is the storage of my trial and error reports from experience or taking lectures. So it maybe contains inaccurate contents. If you find something, or have a question about contents, just feel free to contact me through mail or comment it in each page (comments are linked to my github with utteranc.es) . Nothing &#8617; . |",
          "url": "https://jinmang2.github.io/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://jinmang2.github.io/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}